// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ArrowLink
{

using global::System;
using global::FlatBuffers;

public struct Distributor : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Distributor GetRootAsDistributor(ByteBuffer _bb) { return GetRootAsDistributor(_bb, new Distributor()); }
  public static Distributor GetRootAsDistributor(ByteBuffer _bb, Distributor obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Distributor __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int DifficultyLevel { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Precedence(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PrecedenceLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPrecedenceBytes() { return __p.__vector_as_arraysegment(6); }

  public static Offset<Distributor> CreateDistributor(FlatBufferBuilder builder,
      int DifficultyLevel = 0,
      VectorOffset PrecedenceOffset = default(VectorOffset)) {
    builder.StartObject(2);
    Distributor.AddPrecedence(builder, PrecedenceOffset);
    Distributor.AddDifficultyLevel(builder, DifficultyLevel);
    return Distributor.EndDistributor(builder);
  }

  public static void StartDistributor(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddDifficultyLevel(FlatBufferBuilder builder, int DifficultyLevel) { builder.AddInt(0, DifficultyLevel, 0); }
  public static void AddPrecedence(FlatBufferBuilder builder, VectorOffset PrecedenceOffset) { builder.AddOffset(1, PrecedenceOffset.Value, 0); }
  public static VectorOffset CreatePrecedenceVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartPrecedenceVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Distributor> EndDistributor(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Distributor>(o);
  }
};

public struct GameState : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static GameState GetRootAsGameState(ByteBuffer _bb) { return GetRootAsGameState(_bb, new GameState()); }
  public static GameState GetRootAsGameState(ByteBuffer _bb, GameState obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public GameState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Version { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Board(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BoardLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetBoardBytes() { return __p.__vector_as_arraysegment(6); }
  public int CurrentTile { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NextTile { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HoldTile { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BankTarget { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BankState { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CrunchState { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int OverLinkState { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Score { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TileScore { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ComboCounter { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CrunchCounter { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Distributor? DistributorState { get { int o = __p.__offset(30); return o != 0 ? (Distributor?)(new Distributor()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<GameState> CreateGameState(FlatBufferBuilder builder,
      int Version = 0,
      VectorOffset BoardOffset = default(VectorOffset),
      int CurrentTile = 0,
      int NextTile = 0,
      int HoldTile = 0,
      int BankTarget = 0,
      int BankState = 0,
      int CrunchState = 0,
      int OverLinkState = 0,
      int Score = 0,
      int TileScore = 0,
      int ComboCounter = 0,
      int CrunchCounter = 0,
      Offset<Distributor> DistributorStateOffset = default(Offset<Distributor>)) {
    builder.StartObject(14);
    GameState.AddDistributorState(builder, DistributorStateOffset);
    GameState.AddCrunchCounter(builder, CrunchCounter);
    GameState.AddComboCounter(builder, ComboCounter);
    GameState.AddTileScore(builder, TileScore);
    GameState.AddScore(builder, Score);
    GameState.AddOverLinkState(builder, OverLinkState);
    GameState.AddCrunchState(builder, CrunchState);
    GameState.AddBankState(builder, BankState);
    GameState.AddBankTarget(builder, BankTarget);
    GameState.AddHoldTile(builder, HoldTile);
    GameState.AddNextTile(builder, NextTile);
    GameState.AddCurrentTile(builder, CurrentTile);
    GameState.AddBoard(builder, BoardOffset);
    GameState.AddVersion(builder, Version);
    return GameState.EndGameState(builder);
  }

  public static void StartGameState(FlatBufferBuilder builder) { builder.StartObject(14); }
  public static void AddVersion(FlatBufferBuilder builder, int Version) { builder.AddInt(0, Version, 0); }
  public static void AddBoard(FlatBufferBuilder builder, VectorOffset BoardOffset) { builder.AddOffset(1, BoardOffset.Value, 0); }
  public static VectorOffset CreateBoardVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartBoardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCurrentTile(FlatBufferBuilder builder, int CurrentTile) { builder.AddInt(2, CurrentTile, 0); }
  public static void AddNextTile(FlatBufferBuilder builder, int NextTile) { builder.AddInt(3, NextTile, 0); }
  public static void AddHoldTile(FlatBufferBuilder builder, int HoldTile) { builder.AddInt(4, HoldTile, 0); }
  public static void AddBankTarget(FlatBufferBuilder builder, int BankTarget) { builder.AddInt(5, BankTarget, 0); }
  public static void AddBankState(FlatBufferBuilder builder, int BankState) { builder.AddInt(6, BankState, 0); }
  public static void AddCrunchState(FlatBufferBuilder builder, int CrunchState) { builder.AddInt(7, CrunchState, 0); }
  public static void AddOverLinkState(FlatBufferBuilder builder, int OverLinkState) { builder.AddInt(8, OverLinkState, 0); }
  public static void AddScore(FlatBufferBuilder builder, int Score) { builder.AddInt(9, Score, 0); }
  public static void AddTileScore(FlatBufferBuilder builder, int TileScore) { builder.AddInt(10, TileScore, 0); }
  public static void AddComboCounter(FlatBufferBuilder builder, int ComboCounter) { builder.AddInt(11, ComboCounter, 0); }
  public static void AddCrunchCounter(FlatBufferBuilder builder, int CrunchCounter) { builder.AddInt(12, CrunchCounter, 0); }
  public static void AddDistributorState(FlatBufferBuilder builder, Offset<Distributor> DistributorStateOffset) { builder.AddOffset(13, DistributorStateOffset.Value, 0); }
  public static Offset<GameState> EndGameState(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GameState>(o);
  }
  public static void FinishGameStateBuffer(FlatBufferBuilder builder, Offset<GameState> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedGameStateBuffer(FlatBufferBuilder builder, Offset<GameState> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
